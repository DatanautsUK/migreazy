#!/usr/bin/env ruby

if ARGV.size != 2
  puts "migreazy [diff|down] [git branch]"
end
verb = ARGV.shift
unless %w(diff down).include?(verb)
  puts "'#{verb}' is not a migreazy command."
  exit
end

require 'config/boot'
require 'config/environment'
require 'grit'

module Migreazy
  class Difference
    attr_reader :missing_in_branch, :missing_in_db
  
    def initialize(git_branch_name)
      repo = Grit::Repo.new '.'
      head = repo.heads.detect { |h| h.name == git_branch_name }
      all_migrations = (head.commit.tree / "db/migrate").contents
      branch_migrations = all_migrations.map { |blob|
        blob.name.gsub(/^0*(\d+)_.*/, '\1')
      }
      db_config = YAML::load(IO.read("./config/database.yml"))
      ActiveRecord::Base.establish_connection db_config['dev']
      dev_db_migrations = ActiveRecord::Base.connection.select_all(
        "select version from schema_migrations"
      ).map { |hash| hash['version'] }
      @missing_in_db = branch_migrations - dev_db_migrations
      @missing_in_branch = dev_db_migrations - branch_migrations
    end
  end
end

git_branch_name = ARGV.shift
if verb == 'diff'
  difference = Migreazy::Difference.new git_branch_name
  puts "Missing in dev DB:"
  if difference.missing_in_db.empty?
    puts "  (none)"
  else
    puts "  #{difference.missing_in_db.join(', ')}"
  end
  puts
  puts "Missing in branch #{git_branch_name}:"
  if difference.missing_in_branch.empty?
    puts "  (none)"
  else
    puts "  #{difference.missing_in_branch.join(', ')}"
  end
elsif verb == 'down'
  difference = Migreazy::Difference.new git_branch_name
  successful_downs = []
  difference.missing_in_branch.sort.reverse.each do |migration|
    puts `rake db:migrate:down VERSION=#{migration}`
    successful_downs << migration
  end
  sql = "delete from schema_migrations where version in (#{
    successful_downs.join(',')
  })"
  ActiveRecord::Base.connection.execute sql
end