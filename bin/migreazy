#!/usr/bin/env ruby

if ARGV.size < 1
  puts "migreazy [diff|down]"
  exit
end

require 'config/boot'
require 'config/environment'
require 'grit'

module Migreazy
  @@db_connected = false
  
  def self.ensure_db_connection
    unless @@db_connected
      db_config = YAML::load(IO.read("./config/database.yml"))
      ActiveRecord::Base.establish_connection db_config['development']
      @@db_connected = true
    end
  end

  class Action
    def initialize(opts)
      @opts = opts
      if opts.empty?
        @migration_source1 = MigrationSource::Database.new
        @migration_source2 = MigrationSource::WorkingCopy.new
      elsif opts.size == 1
        @migration_source1 = MigrationSource::Database.new
        @migration_source2 = MigrationSource::GitBranch.new(opts.first)
      end
    end
  
    class Diff < Action
      def run
        missing_in_db =
            @migration_source2.migrations - @migration_source1.migrations
        puts "Missing in #{@migration_source1.description}:"
        if missing_in_db.empty?
          puts "  (none)"
        else
          puts "  #{missing_in_db.join(', ')}"
        end
        puts
        missing_in_branch =
            @migration_source1.migrations - @migration_source2.migrations
        puts "Missing in #{@migration_source2.description}:"
        if missing_in_branch.empty?
          puts "  (none)"
        else
          puts "  #{missing_in_branch.join(', ')}"
        end
      end
    end
    
    class Down < Action
      def run
        successful_downs = []
        missing_in_branch =
            @migration_source1.migrations - @migration_source2.migrations
        if missing_in_branch.empty?
          puts "No down migrations to run"
        else
          missing_in_branch.sort.reverse.each do |migration|
            puts `rake db:migrate:down VERSION=#{migration}`
            successful_downs << migration
          end
          Migreazy.ensure_db_connection
          sql = "delete from schema_migrations where version in (#{
            successful_downs.join(',')
          })"
          ActiveRecord::Base.connection.execute sql
        end
      end
    end
  end
  
  class MigrationSource
    attr_reader :migrations
  
    class Database < MigrationSource
      def initialize
        Migreazy.ensure_db_connection
        @migrations = ActiveRecord::Base.connection.select_all(
          "select version from schema_migrations"
        ).map { |hash| hash['version'] }
      end
      
      def description
        "development DB"
      end
    end
    
    class GitBranch < MigrationSource
      def initialize(git_branch_name)
        @git_branch_name = git_branch_name
        repo = Grit::Repo.new '.'
        head = repo.heads.detect { |h| h.name == @git_branch_name }
        all_migrations = (head.commit.tree / "db/migrate").contents
        @migrations = all_migrations.map { |blob|
          blob.name.gsub(/^0*(\d+)_.*/, '\1')
        }
      end
      
      def description
        "branch #{@git_branch_name}"
      end
    end
    
    class WorkingCopy < MigrationSource
      def initialize
        @migrations = Dir.entries("./db/migrate").select { |entry|
          entry =~ /^\d+.*\.rb$/
        }.map { |entry|
          entry.gsub(/^0*(\d+)_.*/, '\1')
        }
      end
      
      def description
        "working copy"
      end
    end
  end
end

action = ARGV.first
action_class = begin
  Migreazy::Action.const_get(action.capitalize)
rescue NameError
end
if action_class
  action_class.new(ARGV[1..-1]).run
else
  puts "'#{action}' is not a migreazy action."
end