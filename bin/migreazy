#!/usr/bin/env ruby

if ARGV.size < 1
  puts "migreazy [diff|down]"
  exit
end

require 'config/boot'
require 'config/environment'
require 'grit'

module Migreazy
  @@db_connected = false
  
  def self.ensure_db_connection
    unless @@db_connected
      db_config = YAML::load(IO.read("./config/database.yml"))
      ActiveRecord::Base.establish_connection db_config['development']
      @@db_connected = true
    end
  end

  class Action
    def initialize(opts)
      @opts = opts
    end
  
    class Diff < Action
      def run
        git_branch_name = @opts.first
        difference = Migreazy::Difference.new git_branch_name
        puts "Missing in dev DB:"
        if difference.missing_in_db.empty?
          puts "  (none)"
        else
          puts "  #{difference.missing_in_db.join(', ')}"
        end
        puts
        description = if git_branch_name
          "branch #{git_branch_name}"
        else
          "working copy"
        end
        puts "Missing in #{description}:"
        if difference.missing_in_branch.empty?
          puts "  (none)"
        else
          puts "  #{difference.missing_in_branch.join(', ')}"
        end
      end
    end
    
    class Down < Action
      def run
        git_branch_name = @opts.first
        difference = Migreazy::Difference.new git_branch_name
        successful_downs = []
        difference.missing_in_branch.sort.reverse.each do |migration|
          puts `rake db:migrate:down VERSION=#{migration}`
          successful_downs << migration
        end
        Migreazy.ensure_db_connection
        sql = "delete from schema_migrations where version in (#{
          successful_downs.join(',')
        })"
        ActiveRecord::Base.connection.execute sql
      end
    end
  end
  
  class Difference
    attr_reader :missing_in_branch, :missing_in_db
  
    def initialize(git_branch_name)
      if git_branch_name
        repo = Grit::Repo.new '.'
        head = repo.heads.detect { |h| h.name == git_branch_name }
        all_migrations = (head.commit.tree / "db/migrate").contents
        branch_migrations = all_migrations.map { |blob|
          blob.name.gsub(/^0*(\d+)_.*/, '\1')
        }
      else
        branch_migrations = Dir.entries("./db/migrate").select { |entry|
          entry =~ /\d+.*\.rb/
        }.map { |entry|
          entry.gsub(/^0*(\d+)_.*/, '\1')
        }
      end
      Migreazy.ensure_db_connection
      dev_db_migrations = ActiveRecord::Base.connection.select_all(
        "select version from schema_migrations"
      ).map { |hash| hash['version'] }
      @missing_in_db = branch_migrations - dev_db_migrations
      @missing_in_branch = dev_db_migrations - branch_migrations
    end
  end
end

action = ARGV.first
action_class = begin
  Migreazy::Action.const_get(action.capitalize)
rescue NameError
end
if action_class
  action_class.new(ARGV[1..-1]).run
else
  puts "'#{action}' is not a migreazy action."
end